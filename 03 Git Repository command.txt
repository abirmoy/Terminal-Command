how to add github to GIT
https://docs.github.com/en/authentication/connecting-to-github-with-ssh

ssh-keygen -t ed25519 -C "your_email@example.com"
ssh-add ~/.ssh/id_ed25519
$ clip < ~/.ssh/id_ed25519.pub
# Copies the contents of the id_ed25519.pub file to your clipboard

# Setting Up GIT
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

ssh-keygen -t ed25519 -C "your_email@example.com"

https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

clip < ~/.ssh/id_ed25519.pub




### GIT IGNORE ###
https://www.freecodecamp.org/news/gitignore-file-how-to-ignore-files-and-folders-in-git/

touch .gitignore	# creating .gitignore file 

/text.txt		# ingnore the file /text.txt in root directory
text.txt		# ignore any file text.txt within the repository
/test/text.txt		# ingnore the file text.txt in /test directory
test/			# ingore the /test directory
img*			# ignore all files and directories that have a name starting with img
*.mp3			# This pattern will match any file ending with the .mp3 extension located anywhere in the project.
!atheme.mp3		# exclamation mark, !, to negate a file that would otherwise be ignored. if don't want Git to ignore a atheme.mp3 file after doing *.mp3 (it doesn't work if the entire folder is ignored)
!test/example.md	# negate a file inside an ignored directory won't work


*** Please tell me who you are.

Run

  git config --global user.email "n.abirmoy@gmail.com"
  git config --global user.name "Abirmoy"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'nabir@Abirmoy.(none)')


…or create a new repository on the command line
echo "# s" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:abirmoy/s.git
git push -u origin master
…or push an existing repository from the command line
git remote add origin git@github.com:abirmoy/s.git
git push -u origin main

git pull
git pull --allow-unrelated-histories


git push -u origin master --force
git status

### BRANCH ###
git checkout -b <branch-name>    				# will create & switch to a new branch
git branch <branch-name>					# creates branch
git checkout <branch-name>					# switchs branch
git merge <branch-name>
git branch -d <branch-name>					# deletes branch
git push -u origin <branch-name>

# DELETE & RENAME #
git branch -d <branch_name>					# deletes local branch; To remove a local branch, This command will only delete the branch if it has already been merged with its upstream branch. If you want to force the deletion of the branch, even if it has not been merged, you can use the -D option instead of -d.
git push origin --delete <branch_name>				# deletes a remote branch




### Mirroring a Repository ###
https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/duplicating-a-repository

1. Create a bare clone of the repository

$ git clone --bare https://github.com/exampleuser/old-repository.git

2. Mirror-push to the new repository.
$ cd old-repository.git
$ git push --mirror https://github.com/exampleuser/new-repository.git

3. Remove the temporary local repository you created earlier.
$ cd ..
$ rm -rf old-repository.git









### CHANGING DEFAULT EDITOR ###
git config --global core.editor "EDITOR_NAME"

### GENERATING & ADDING SSH KEY ###
https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

1.
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
2.
When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.
Default Location of Storing SSH key: c/Users/you/.ssh/id_rsa
3.
At the prompt, type a secure passphrase. For more information, see "Working with SSH key passphrases".
# start the ssh-agent in the background
$ eval $(ssh-agent -s)
> Agent pid 59566

4.
Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file.
$ ssh-add ~/.ssh/id_rsa
5.
$ clip < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard
6. navigate to github>settings>SSH and GPG keys>add key


