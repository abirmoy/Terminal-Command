type(arg)                                                  # returns file type



### BRANCHING & ITERATION  ###
continue                                                   # goes to the top of the current closest enclosing loop
break                                                      # breaks out of the current enclosing loop
pass                                                       # does nothing; placeholder



### STRING ###
# CAPITALIZE WORD #
.upper()                                                    # converts each latter uppercase
.lower()                                                    # converts each latter lowercase
.capitalize()                                               # converts 1st latter of a string uppercase
.title()                                                    #"e g 3b".title() returns "E G 3B";  better use string.capwords
string.capwords('pass the string here')                     # converts 1st latter of every word to uppercase

### LIST ###
'''
    Ordered sequence of objects, mutatble
    Should be careful while iterating over a list. It's good practice to clone the list before iterating 
    ex. 
    a_list = [x,x,x,x]
    a_list_copy = a[:] # NOTE a_list_copy = a_list is not cloning and it could be dangerous
'''

.append(something)
.sort()                                                     # mutates returns nothing
sorted(a_List)                                              # doesn't mutate
.reverse()                                                  # mutates
list(something)                                             # doesn't mutate ie. s='abcd'; list(s);->['a','b','c']
.split('some_string')                                       # returns list, doesn't mutate ie. s='ab>qcd'; s.split('>');->['ab','qcd']
.join(a_List)                                               # doesn't mutate ie. s=['a','b','c']; '_'.join(s);->'a_b_c'
.extend([x,x,x])                                            # mutates and extends a list
# REMOVE LIST ELEMENT #
del(aList[index])                                           # remove element at a specific index
.pop() or .pop(index)                                       # removes element at end alslo suports indexing & RETURNS REMOVED ELEMENT
.remove(element)                                            # removes a spesific element ie. a =[1,4,3,6]; a.remove(4);->a=[1,3,6]                                                    # 





### DICTIONARY ###
'''
    Unordered key:value pairs, values are mutable
'''

dict['key'] = 'value'                                       # add an entry in dictionary
delete(dict['key'])                                         # delete entry 
.keys()                                                     # returns tuple of unordered list of keys 
.values                                                     # returns tuple of unordered list of values









### OS ###
import os                                                   # import os library


os.rename(file_to_rename, 'new_name')                       # rename file
os.path.exists(file path or name)                           # Returns true if the path is a file, directory, or a valid symlink.
os.path.isfile(file path or name)                           # Returns true if the path is a regular file or a symlink to a file.
os.path.isdir(path)                                         # Returns true if the path is a directory or a symlink to a directory.
os.getcwd()                                                 # Returns current working directory
os.chdir(path)                                              # change directory
os.listdir(path)                                            # returns list of the files and subdirectories in the directory passed into the path argument
os.scandir(path)                                            # returns an iterator as opposed to a list when called





### MATH ###
min(args*)                                                  #
max(args*)                                                  #
sum(args*)                                                  #
abs()                                                       # absuloute value


### NUMPY ###
'''
    Shape: A tuple of integers giving the size of the array along each dimension is known as shape of the array.

'''
import numpy as np

arr = np.array( [[ x11, x12, x13 ],[ x21, x22, x23]] )      # Creating array object
arr.ndim                                                    # Printing array dimensions (axes)
arr.shape                                                   # shape of array
arr.size                                                    # size (total number of elements) of array
arr.dtype                                                   # type of elements in array

np.zeros((shape))                                           # Creates a array with all zeros according to the shape





### PYTORCH ###
from __future__ import print_function
import torch
import numpy as np



.numpy()                                                    # Converts a Torch Tensor to a NumPy Array
.size()                                                     # shape of the matrix in tuple; same numPy .shape
torch.empty(size) i.e torch.empty(5, 3)                     # Construct a 5x3 size matrix, uninitialized full of zeros
torch.rand(size)                                            # Construct a randomly initialized matrix
torch.zeros(5, 3, dtype=torch.long)                         # Construct a matrix filled zeros and of dtype long
torch.ones(size)                                            # Construct a matrix filled ones
torch.add(x, y)                                             # Matrix addition
y.add_(x)                                                   # adds x to y; Addition: in-place; Any operation that mutates a tensor in-place is post-fixed with an _. For example: x.copy_(y), x.t_(), will change x.
np.add(a, 1, out=a)                                         # out=a will mutate 'a'; 'a' is a matrix; 1 will be added to the elements of Matrix 'a'; 











































































































































































